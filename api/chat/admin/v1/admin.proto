syntax = "proto3";

package api.chat.admin.v1;

import "google/api/annotations.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/869413421/micro-chat/api/chat/server/v1;v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info:{
    title: "chat admin api"
    version: "v1"
    contact:{
      name: "github.com/869413421/micro-chat/api/chat/server/v1"
    }
  };
  security_definitions:{
    security:{
      key:"basicAuth",
      value:{
        type: TYPE_BASIC,
        name: "Authorization", in: IN_HEADER,
        description: "JWT"
      };
    };
  };
};

service ChatAdmin {
  rpc Login (LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/admin/v1/login"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "登录",
      description: "登录",
      security : {
        security_requirement:{key:"Authorization",value:{}};
      };
    };
  }

  rpc CreateUser (CreateUserRequest) returns (UserInfoResponse) {
    option (google.api.http) = {
      post: "/admin/v1/user"
      body: "*"
    };
  }

  rpc UpdateUser (UpdateUserRequest) returns (UserInfoResponse) {
    option (google.api.http) = {
      put: "/admin/v1/user/{id}"
      body: "*"
    };
  }

  rpc DeleteUser (DeleteUserRequest) returns (UserInfoResponse) {
    option (google.api.http) = {
      delete: "/admin/v1/user/{id}"
    };
  }

  rpc UserInfo (UserInfoRequest) returns (UserInfoResponse) {
    option (google.api.http) = {
      get: "/admin/v1/user/{id}"
    };
  }

  rpc UserList (UserListRequest) returns (UserListResponse) {
    option (google.api.http) = {
      get: "/admin/v1/user"
    };
  }

  rpc CreateRole (CreateRoleRequest) returns (RoleInfoResponse) {
    option (google.api.http) = {
      post: "/admin/v1/role"
      body: "*"
    };
  }

  rpc UpdateRole (UpdateRoleRequest) returns (RoleInfoResponse) {
    option (google.api.http) = {
      put: "/admin/v1/role/{id}"
      body: "*"
    };
  }

  rpc DeleteRole (DeleteRoleRequest) returns (RoleInfoResponse) {
    option (google.api.http) = {
      delete: "/admin/v1/role/{id}"
    };
  }

  rpc RoleInfo (RoleInfoRequest) returns (RoleInfoResponse) {
    option (google.api.http) = {
      get: "/admin/v1/role/{id}"
    };
  }

  rpc RoleList (RoleListRequest) returns (RoleListResponse) {
    option (google.api.http) = {
      get: "/admin/v1/role"
    };
  }

  rpc CreatePermission (CreatePermissionRequest) returns (PermissionInfoResponse) {
    option (google.api.http) = {
      post: "/admin/v1/permission"
      body: "*"
    };
  }

  rpc UpdatePermission (UpdatePermissionRequest) returns (PermissionInfoResponse) {
    option (google.api.http) = {
      put: "/admin/v1/permission/{id}"
      body: "*"
    };
  }

  rpc DeletePermission (DeletePermissionRequest) returns (PermissionInfoResponse) {
    option (google.api.http) = {
      delete: "/admin/v1/permission/{id}"
    };
  }

  rpc PermissionInfo (PermissionInfoRequest) returns (PermissionInfoResponse) {
    option (google.api.http) = {
      get: "/admin/v1/permission/{id}"
    };
  }

  rpc PermissionList (PermissionListRequest) returns (PermissionListResponse) {
    option (google.api.http) = {
      get: "/admin/v1/permission"
    };
  }
}

// 登录请求
message LoginRequest {
  string email = 1 [(validate.rules).string.email = true];
  string password = 2 [(validate.rules).string = {
    min_len:   2,
    max_len: 12,
  }];
}

// 登录响应
message LoginResponse {
  string token = 1;
}

// 权限创建请求
message CreatePermissionRequest {
  string name = 1 [(validate.rules).string = {
    min_len:   2,
    max_len: 12,
  }];
  string memo = 2 [(validate.rules).string = {
    min_len:   2,
    max_len: 200,
  }];
  string path = 3 [(validate.rules).string = {
    min_len:   2,
    max_len: 200,
  }];
  string method = 4 [(validate.rules).string = {
    min_len:   2,
    max_len: 12,
  }];
  uint64 parentId = 5;
}

// 权限更新请求
message UpdatePermissionRequest {
  uint64 id = 1 [(validate.rules).uint64.gt = 0];
  string name = 2 [(validate.rules).string = {
    min_len:   2,
    max_len: 12,
  }];
  string memo = 3 [(validate.rules).string = {
    min_len:   2,
    max_len: 200,
  }];
  string path = 4 [(validate.rules).string = {
    min_len:   2,
    max_len: 200,
  }];
  string method = 5 [(validate.rules).string = {
    min_len:   2,
    max_len: 12,
  }];
  uint64 parentId = 6;
}

// 权限删除请求
message DeletePermissionRequest {
  uint64 id = 1 [(validate.rules).uint64.gt = 0];
}

// 权限信息请求
message PermissionInfoRequest {
  uint64 id = 1 [(validate.rules).uint64.gt = 0];
}

// 权限列表请求
message PermissionListRequest {
  int64 page = 1 ;
  int64 pageSize = 2;
}

// 权限列表响应
message PermissionListResponse {
  int64 total = 1;
  repeated PermissionInfoResponse permissions = 2;
}

// 权限信息响应
message PermissionInfoResponse{
  uint64 id = 1;
  string name = 2;
  string memo = 3;
  string path = 4;
  string method = 5;
  uint64 parentId = 6;
  string parentIds = 7;
  string created_at = 8;
  string updated_at = 9;
}

// 角色信息响应
message RoleInfoResponse{
  uint64 id = 1;
  string name = 2;
  string memo = 3;
  string created_at = 4;
  string updated_at = 5;
}

// 创建角色请求
message CreateRoleRequest {
  string name = 1 [(validate.rules).string = {
    min_len:   2,
    max_len: 12,
  }];
  string memo = 2 [(validate.rules).string = {
    min_len:   2,
    max_len: 200,
  }];
}

// 更新角色请求
message UpdateRoleRequest {
  uint64 id = 1 [(validate.rules).uint64.gt = 0];
  string name = 2 [(validate.rules).string = {
    min_len:   2,
    max_len: 12,
  }];
  string memo = 3 [(validate.rules).string = {
    min_len:   2,
    max_len: 200,
  }];
}

// 删除角色请求
message DeleteRoleRequest {
  uint64 id = 1 [(validate.rules).uint64.gt = 0];
}

// 角色信息请求
message RoleInfoRequest {
  uint64 id = 1 [(validate.rules).uint64.gt = 0];
}

// 角色列表请求
message RoleListRequest {
  int64 page = 1 ;
  int64 pageSize = 2;
}

// 角色列表响应
message RoleListResponse{
  int64 total = 1;
  repeated RoleInfoResponse roles = 2;
}

// 用户信息响应
message UserInfoResponse{
  uint64 id = 1;
  string name = 2;
  string email = 3;
  string created_at = 4;
  string updated_at = 5;
}

// 用户列表响应
message UserListResponse{
  int64 total = 1;
  repeated UserInfoResponse users = 2;
}

// 创建用户请求
message CreateUserRequest {
  string name = 1 [(validate.rules).string = {
    min_len:   2,
    max_len: 12,
  }];
  string password = 2 [(validate.rules).string.min_len = 6];
  string email = 3 [(validate.rules).string.email = true];
}

// 更新用户请求
message UpdateUserRequest {
  uint64 id = 1 [(validate.rules).uint64.gt = 0];
  string name = 2 [(validate.rules).string = {
    min_len:   2,
    max_len: 12,
  }];
  string password = 3 [(validate.rules).string.min_len = 6];
  string email = 4 [(validate.rules).string.email = true];
}

// 删除用户请求
message DeleteUserRequest {
  uint64 id = 1 [(validate.rules).uint64.gt = 0];
}

// 用户信息请求
message UserInfoRequest {
  uint64 id = 1 [(validate.rules).uint64.gt = 0];
}

// 用户列表请求
message UserListRequest {
  int64 page = 1 ;
  int64 pageSize = 2;
}

