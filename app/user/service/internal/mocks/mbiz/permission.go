// Code generated by MockGen. DO NOT EDIT.
// Source: permission.go

// Package mbiz is a generated GoMock package.
package mbiz

import (
	context "context"
	reflect "reflect"

	v1 "github.com/869413421/micro-chat/api/user/service/v1"
	biz "github.com/869413421/micro-chat/app/user/service/internal/biz"
	gomock "github.com/golang/mock/gomock"
)

// MockPermissionRepo is a mock of PermissionRepo interface.
type MockPermissionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionRepoMockRecorder
}

// MockPermissionRepoMockRecorder is the mock recorder for MockPermissionRepo.
type MockPermissionRepoMockRecorder struct {
	mock *MockPermissionRepo
}

// NewMockPermissionRepo creates a new mock instance.
func NewMockPermissionRepo(ctrl *gomock.Controller) *MockPermissionRepo {
	mock := &MockPermissionRepo{ctrl: ctrl}
	mock.recorder = &MockPermissionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionRepo) EXPECT() *MockPermissionRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPermissionRepo) Create(arg0 context.Context, arg1 *biz.Permission) (*biz.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*biz.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPermissionRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPermissionRepo)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockPermissionRepo) Delete(arg0 context.Context, arg1 uint64) (*biz.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*biz.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPermissionRepoMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPermissionRepo)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockPermissionRepo) Get(arg0 context.Context, arg1 map[string]interface{}) (*biz.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*biz.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPermissionRepoMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPermissionRepo)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockPermissionRepo) List(arg0 context.Context, arg1 map[string]interface{}, arg2 map[string]bool, arg3, arg4 int64) ([]*biz.Permission, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*biz.Permission)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockPermissionRepoMockRecorder) List(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPermissionRepo)(nil).List), arg0, arg1, arg2, arg3, arg4)
}

// Update mocks base method.
func (m *MockPermissionRepo) Update(arg0 context.Context, arg1 *biz.Permission) (*biz.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*biz.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPermissionRepoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPermissionRepo)(nil).Update), arg0, arg1)
}

// MockPermissionUsecase is a mock of PermissionUsecase interface.
type MockPermissionUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionUsecaseMockRecorder
}

// MockPermissionUsecaseMockRecorder is the mock recorder for MockPermissionUsecase.
type MockPermissionUsecaseMockRecorder struct {
	mock *MockPermissionUsecase
}

// NewMockPermissionUsecase creates a new mock instance.
func NewMockPermissionUsecase(ctrl *gomock.Controller) *MockPermissionUsecase {
	mock := &MockPermissionUsecase{ctrl: ctrl}
	mock.recorder = &MockPermissionUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionUsecase) EXPECT() *MockPermissionUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPermissionUsecase) Create(arg0 context.Context, arg1 *v1.CreatePermissionRequest) (*biz.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*biz.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPermissionUsecaseMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPermissionUsecase)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockPermissionUsecase) Delete(arg0 context.Context, arg1 uint64) (*biz.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*biz.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPermissionUsecaseMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPermissionUsecase)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockPermissionUsecase) Get(arg0 context.Context, arg1 *v1.GetPermissionRequest) (*biz.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*biz.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPermissionUsecaseMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPermissionUsecase)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockPermissionUsecase) List(arg0 context.Context, arg1 *v1.ListPermissionRequest) ([]*biz.Permission, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*biz.Permission)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockPermissionUsecaseMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPermissionUsecase)(nil).List), arg0, arg1)
}

// Update mocks base method.
func (m *MockPermissionUsecase) Update(arg0 context.Context, arg1 *v1.UpdatePermissionRequest) (*biz.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*biz.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPermissionUsecaseMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPermissionUsecase)(nil).Update), arg0, arg1)
}
